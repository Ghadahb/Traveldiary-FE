{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Button, Modal, FormControl, Input, Center, Spinner, Form, NativeBaseProvider } from \"native-base\";\nimport { useState } from \"react\";\nimport tripStore from \"../../store/tripStore\";\nimport { observer } from \"mobx-react\";\nimport authStore from \"../../store/authStore\";\n\nvar TripUpdateModal = function TripUpdateModal(_ref) {\n  var trip = _ref.trip;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState({\n    titl: trip.name\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newtrip = _useState4[0],\n      setTrip = _useState4[1];\n\n  var handleUpdate = function handleUpdate() {\n    tripStore.updateTrip(trip._id, newtrip);\n    console.log(trip._id);\n  };\n\n  return React.createElement(Center, {\n    flex: 1,\n    px: \"3\"\n  }, React.createElement(React.Fragment, null, React.createElement(Button, {\n    onPress: function onPress() {\n      return setShowModal(true);\n    }\n  }, \"Update\"), React.createElement(Modal, {\n    isOpen: showModal,\n    onClose: function onClose() {\n      return setShowModal(false);\n    }\n  }, React.createElement(Modal.Content, {\n    maxWidth: \"400px\"\n  }, React.createElement(Modal.CloseButton, null), React.createElement(Modal.Header, null, \"Update your Trip\"), React.createElement(Modal.Body, null, React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"Title\"), React.createElement(Input, {\n    onChangeText: function onChangeText(name) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        name: name\n      }));\n    }\n  })), React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl.Label, null, \"Photo\"), React.createElement(Input, {\n    name: \"image\",\n    type: \"file\",\n    onChangeText: function onChangeText(image) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        image: image\n      }));\n    }\n  }))), React.createElement(Modal.Footer, null, React.createElement(Button.Group, {\n    space: 2\n  }, React.createElement(Button, {\n    variant: \"ghost\",\n    colorScheme: \"blueGray\",\n    onPress: function onPress() {\n      setShowModal(false);\n    }\n  }, \"Cancel\"), React.createElement(Button, {\n    onPress: handleUpdate\n  }, \"save\")))))));\n};\n\nexport default observer(TripUpdateModal);","map":{"version":3,"sources":["C:/Users/hamsa/developmint/Traveldiary-ProjectFE-Final/Components/trips/TripUpdateModal.js"],"names":["React","Button","Modal","FormControl","Input","Center","Spinner","Form","NativeBaseProvider","useState","tripStore","observer","authStore","TripUpdateModal","trip","showModal","setShowModal","titl","name","newtrip","setTrip","handleUpdate","updateTrip","_id","console","log","image"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIEC,KAJF,EAKEC,MALF,EAMEC,OANF,EAOEC,IAPF,EAQEC,kBARF,QASO,aATP;AAUA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,SAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAY;AAAA,MAAVC,IAAU,QAAVA,IAAU;;AAClC,kBAAkCL,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA2BP,QAAQ,CAAC;AAChCQ,IAAAA,IAAI,EAAEH,IAAI,CAACI;AADqB,GAAD,CAAnC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,OAAhB;;AAIF,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBX,IAAAA,SAAS,CAACY,UAAV,CAAqBR,IAAI,CAACS,GAA1B,EAA+BJ,OAA/B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACS,GAAjB;AACD,GAHD;;AAiBE,SACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,CAAd;AAAiB,IAAA,EAAE,EAAC;AAApB,KACE,0CACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMP,YAAY,CAAC,IAAD,CAAlB;AAAA;AAAjB,cADF,EAEE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAED,SAAf;AAA0B,IAAA,OAAO,EAAE;AAAA,aAAMC,YAAY,CAAC,KAAD,CAAlB;AAAA;AAAnC,KACE,oBAAC,KAAD,CAAO,OAAP;AAAe,IAAA,QAAQ,EAAC;AAAxB,KACE,oBAAC,KAAD,CAAO,WAAP,OADF,EAEE,oBAAC,KAAD,CAAO,MAAP,2BAFF,EAGE,oBAAC,KAAD,CAAO,IAAP,QACE,oBAAC,WAAD,QACE,oBAAC,WAAD,CAAa,KAAb,gBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,sBAACE,IAAD;AAAA,aAAUE,OAAO,iCAAMN,IAAN;AAAYI,QAAAA,IAAI,EAAJA;AAAZ,SAAjB;AAAA;AAArB,IAFF,CADF,EAKE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC;AAAhB,KACE,oBAAC,WAAD,CAAa,KAAb,gBADF,EAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,YAAY,EAAE,sBAACQ,KAAD;AAAA,aAAWN,OAAO,iCAAMN,IAAN;AAAYY,QAAAA,KAAK,EAALA;AAAZ,SAAlB;AAAA;AAHhB,IAFF,CALF,CAHF,EAkBE,oBAAC,KAAD,CAAO,MAAP,QACE,oBAAC,MAAD,CAAQ,KAAR;AAAc,IAAA,KAAK,EAAE;AAArB,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AALH,cADF,EAUE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK;AAAjB,YAVF,CADF,CAlBF,CADF,CAFF,CADF,CADF;AA0CD,CAjED;;AAmEA,eAAeV,QAAQ,CAACE,eAAD,CAAvB","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  FormControl,\r\n  Input,\r\n  Center,\r\n  Spinner,\r\n  Form,\r\n  NativeBaseProvider,\r\n} from \"native-base\";\r\nimport { useState } from \"react\";\r\nimport tripStore from \"../../store/tripStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport authStore from \"../../store/authStore\";\r\n\r\nconst TripUpdateModal = ({trip}) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [newtrip, setTrip] = useState({\r\n      titl: trip.name, \r\n    }\r\n);\r\nconst handleUpdate = () => {\r\n  tripStore.updateTrip(trip._id, newtrip);\r\n  console.log(trip._id);\r\n};\r\n  //   const handleChange = (event) =>\r\n  //     setTrip({ ...trip, [event.target.name]: event.target.value });\r\n\r\n  //   const handleImage = (event) =>\r\n  //     setTrip({ ...trip, image: event.target.files[0] });\r\n\r\n  // const handleSubmit = (event) => {\r\n  //   event.preventDefault();\r\n  //   tripStore.updateTrip(trip);\r\n  //   // handleClose();\r\n  // };\r\n \r\n\r\n  return (\r\n    <Center flex={1} px=\"3\">\r\n      <>\r\n        <Button onPress={() => setShowModal(true)}>Update</Button>\r\n        <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\r\n          <Modal.Content maxWidth=\"400px\">\r\n            <Modal.CloseButton />\r\n            <Modal.Header>Update your Trip</Modal.Header>\r\n            <Modal.Body>\r\n              <FormControl>\r\n                <FormControl.Label>Title</FormControl.Label>\r\n                <Input onChangeText={(name) => setTrip({ ...trip, name })} />\r\n              </FormControl>\r\n              <FormControl mt=\"3\">\r\n                <FormControl.Label>Photo</FormControl.Label>\r\n                <Input\r\n                  name=\"image\"\r\n                  type=\"file\"\r\n                  onChangeText={(image) => setTrip({ ...trip, image })}\r\n                />\r\n              </FormControl>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button.Group space={2}>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  colorScheme=\"blueGray\"\r\n                  onPress={() => {\r\n                    setShowModal(false);\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button onPress={handleUpdate}>save</Button>\r\n              </Button.Group>\r\n            </Modal.Footer>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default observer(TripUpdateModal);"]},"metadata":{},"sourceType":"module"}