{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Button, Modal, FormControl, Input, Center, Spinner, Form, NativeBaseProvider } from \"native-base\";\nimport { useState } from \"react\";\nimport tripStore from \"../../store/tripStore\";\nimport { observer } from \"mobx-react\";\nimport authStore from \"../../store/authStore\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\n\nvar AddButton = function AddButton() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState({\n    name: \"\",\n    title: \"\",\n    subtitle: \"\",\n    description: \"\",\n    image: \"\",\n    date: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      trip = _useState4[0],\n      setTrip = _useState4[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    tripStore.createTrip(trip);\n  };\n\n  var handleImage = function handleImage(event) {\n    return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n      image: event.target.files[0]\n    }));\n  };\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"Permission to access camera roll is required!\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n            console.log(pickerResult);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Center, {\n    flex: 1,\n    px: \"3\"\n  }, React.createElement(React.Fragment, null, React.createElement(Button, {\n    onPress: function onPress() {\n      return setShowModal(true);\n    },\n    backgroundColor: \"#0000ff\"\n  }, \"+\"), React.createElement(Modal, {\n    isOpen: showModal,\n    onClose: function onClose() {\n      return setShowModal(false);\n    }\n  }, React.createElement(Modal.Content, {\n    maxWidth: \"400px\"\n  }, React.createElement(Modal.CloseButton, null), React.createElement(Modal.Header, null, \"Add A Trip\"), React.createElement(Modal.Body, null, React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"Which City?\"), React.createElement(Input, {\n    onChangeText: function onChangeText(name) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        name: name\n      }));\n    }\n  })), React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"Title\"), React.createElement(Input, {\n    onChangeText: function onChangeText(title) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        title: title\n      }));\n    }\n  })), React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl.Label, null, \"Subtitle\"), React.createElement(Input, {\n    name: \"subtite\",\n    onChangeText: function onChangeText(subtitle) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        subtitle: subtitle\n      }));\n    }\n  })), React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl.Label, null, \"Description\"), React.createElement(Input, {\n    name: \"description\",\n    onChangeText: function onChangeText(description) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        description: description\n      }));\n    }\n  }), React.createElement(FormControl.HelperText, null, \"250 character limit.\")), React.createElement(FormControl.Label, {\n    mt: \"3\"\n  }, \"Photo\"), React.createElement(Input, {\n    name: \"image\",\n    type: \"file\"\n  }, React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync\n  }, React.createElement(Text, null, \"Pick a photo\")))), React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"How long was your trip?\"), React.createElement(Input, {\n    onChangeText: function onChangeText(date) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        date: date\n      }));\n    }\n  }), React.createElement(FormControl.HelperText, null, \"Please use this format: YYYY-MM-DD.\"))), React.createElement(Modal.Footer, null, React.createElement(Button.Group, {\n    space: 2\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      setShowModal(false);\n    },\n    backgroundColor: \"#0000ff\"\n  }, \"Cancel\"), React.createElement(Button, {\n    onPress: handleSubmit,\n    backgroundColor: \"#0000ff\"\n  }, \"Save\")))))));\n};\n\nexport default observer(AddButton);","map":{"version":3,"sources":["/Users/ghadah/Development/Traveldiary-ProjectFE-Final/Components/trips/AddButton.js"],"names":["React","Button","Modal","FormControl","Input","Center","Spinner","Form","NativeBaseProvider","useState","tripStore","observer","authStore","ImagePicker","AddButton","showModal","setShowModal","name","title","subtitle","description","image","date","trip","setTrip","handleSubmit","event","preventDefault","createTrip","handleImage","target","files","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Modal,\n  FormControl,\n  Input,\n  Center,\n  Spinner,\n  Form,\n  NativeBaseProvider,\n} from \"native-base\";\nimport { useState } from \"react\";\nimport tripStore from \"../../store/tripStore\";\nimport { observer } from \"mobx-react\";\nimport authStore from \"../../store/authStore\";\nimport { Image, Text, TouchableOpacity } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nconst AddButton = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [trip, setTrip] = useState({\n    name: \"\",\n    title: \"\",\n    subtitle: \"\",\n    description: \"\",\n    image: \"\",\n    date: \"\",\n  });\n\n  //   const handleChange = (event) =>\n  //     setTrip({ ...trip, [event.target.name]: event.target.value });\n\n  //   const handleImage = (event) =>\n  //     setTrip({ ...trip, image: event.target.files[0] });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tripStore.createTrip(trip);\n    // handleClose();\n  };\n  const handleImage = (event) =>\n    setTrip({ ...trip, image: event.target.files[0] });\n\n  const openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    console.log(pickerResult);\n  }\n\n  return (\n    <Center flex={1} px=\"3\">\n      <>\n        <Button onPress={() => setShowModal(true)} backgroundColor=\"#0000ff\">\n          +\n        </Button>\n        <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n          <Modal.Content maxWidth=\"400px\">\n            <Modal.CloseButton />\n            <Modal.Header>Add A Trip</Modal.Header>\n            <Modal.Body>\n              <FormControl>\n                <FormControl.Label>Which City?</FormControl.Label>\n                <Input onChangeText={(name) => setTrip({ ...trip, name })} />\n              </FormControl>\n              <FormControl>\n                <FormControl.Label>Title</FormControl.Label>\n                <Input onChangeText={(title) => setTrip({ ...trip, title })} />\n              </FormControl>\n              <FormControl mt=\"3\">\n                <FormControl.Label>Subtitle</FormControl.Label>\n                <Input\n                  name=\"subtite\"\n                  onChangeText={(subtitle) => setTrip({ ...trip, subtitle })}\n                />\n              </FormControl>\n              <FormControl mt=\"3\">\n                <FormControl mt=\"3\">\n                  <FormControl.Label>Description</FormControl.Label>\n                  <Input\n                    name=\"description\"\n                    onChangeText={(description) =>\n                      setTrip({ ...trip, description })\n                    }\n                  />\n                  <FormControl.HelperText>\n                    250 character limit.\n                  </FormControl.HelperText>\n                </FormControl>\n\n                <FormControl.Label mt=\"3\">Photo</FormControl.Label>\n                \n                  <Input \n                  name=\"image\"\n                  type=\"file\"\n                  >\n            \n                  <TouchableOpacity onPress={openImagePickerAsync} >\n                    <Text >Pick a photo</Text>\n                  </TouchableOpacity>\n                </Input>\n                  {/* // name=\"image\"\n                  // type=\"file\"\n                  // // onChange={handleImage}\n                  // onChangeText={(image) => setTrip({ ...trip, image })}\n                /> */}\n              </FormControl>\n\n              <FormControl>\n                <FormControl.Label>How long was your trip?</FormControl.Label>\n                <Input onChangeText={(date) => setTrip({ ...trip, date })} />\n                <FormControl.HelperText>\n                  Please use this format: YYYY-MM-DD.\n                </FormControl.HelperText>\n              </FormControl>\n            </Modal.Body>\n\n            <Modal.Footer>\n              <Button.Group space={2}>\n                <Button\n                  // variant=\"ghost\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                  backgroundColor=\"#0000ff\"\n                >\n                  Cancel\n                </Button>\n                <Button onPress={handleSubmit} backgroundColor=\"#0000ff\">\n                  Save\n                </Button>\n              </Button.Group>\n            </Modal.Footer>\n          </Modal.Content>\n        </Modal>\n      </>\n    </Center>\n  );\n};\n\nexport default observer(AddButton);\n"]},"metadata":{},"sourceType":"module"}