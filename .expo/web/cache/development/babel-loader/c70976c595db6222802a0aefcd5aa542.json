{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport { Button, Modal, FormControl, Input, Center } from \"native-base\";\nimport tripStore from \"../../store/tripStore\";\nimport { observer } from \"mobx-react\";\nimport authStore from \"../../store/authStore\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from 'expo-image-picker';\n\nvar AddButton = function AddButton() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState({\n    name: \"\",\n    title: \"\",\n    subtitle: \"\",\n    description: \"\",\n    image: \"\",\n    date: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      trip = _useState4[0],\n      setTrip = _useState4[1];\n\n  var handleClose = function handleClose() {\n    return setShowModal(false);\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    tripStore.createTrip(trip);\n    handleClose();\n  };\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result, localUri, filename, match, _image;\n\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 3:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              localUri = result.uri;\n              filename = localUri.split(\"/\").pop();\n              match = /.(\\w+)$/.exec(filename);\n              _image = {\n                uri: localUri,\n                name: filename,\n                type: \"match ? image/\" + match[1] + \" : image\"\n              };\n              setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n                image: _image\n              }));\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(View, null, React.createElement(Center, {\n    flex: 1,\n    px: \"3\"\n  }, authStore.user !== null ? React.createElement(React.Fragment, null, React.createElement(Button, {\n    onPress: function onPress() {\n      return setShowModal(true);\n    },\n    backgroundColor: \"#0000ff\"\n  }, \"+\"), React.createElement(Modal, {\n    isOpen: showModal,\n    onClose: function onClose() {\n      return setShowModal(false);\n    }\n  }, React.createElement(Modal.Content, {\n    maxWidth: \"400px\"\n  }, React.createElement(Modal.CloseButton, null), React.createElement(Modal.Header, null, \"Add A Trip\"), React.createElement(Modal.Body, null, React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"Which City?\"), React.createElement(Input, {\n    onChangeText: function onChangeText(name) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        name: name\n      }));\n    }\n  })), React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"Title\"), React.createElement(Input, {\n    onChangeText: function onChangeText(title) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        title: title\n      }));\n    }\n  })), React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl.Label, null, \"Subtitle\"), React.createElement(Input, {\n    name: \"subtite\",\n    onChangeText: function onChangeText(subtitle) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        subtitle: subtitle\n      }));\n    }\n  })), React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl, {\n    mt: \"3\"\n  }, React.createElement(FormControl.Label, null, \"Description\"), React.createElement(Input, {\n    name: \"description\",\n    onChangeText: function onChangeText(description) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        description: description\n      }));\n    }\n  }), React.createElement(FormControl.HelperText, null, \"250 character limit.\")), React.createElement(FormControl, null, React.createElement(FormControl.Label, null, \"How long was your trip?\"), React.createElement(Input, {\n    onChangeText: function onChangeText(date) {\n      return setTrip(_objectSpread(_objectSpread({}, trip), {}, {\n        date: date\n      }));\n    }\n  }), React.createElement(FormControl.HelperText, null, \"Please use this format: YYYY-MM-DD.\")), React.createElement(FormControl.Label, {\n    mt: \"3\"\n  }, \"Photo\"), React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    }\n  })))), React.createElement(Modal.Footer, null, React.createElement(Button.Group, {\n    space: 2\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      setShowModal(false);\n    },\n    backgroundColor: \"#0000ff\"\n  }, \"Cancel\"), React.createElement(Button, {\n    onPress: handleSubmit,\n    backgroundColor: \"#0000ff\"\n  }, \"Save\")))))) : React.createElement(Button, null, \"+\")));\n};\n\nexport default observer(AddButton);","map":{"version":3,"sources":["C:/Users/hamsa/developmint/Traveldiary-ProjectFE-Final/Components/trips/AddButton.js"],"names":["React","Button","Modal","FormControl","Input","Center","tripStore","observer","authStore","useState","useEffect","ImagePicker","AddButton","showModal","setShowModal","name","title","subtitle","description","image","date","trip","setTrip","handleClose","handleSubmit","event","preventDefault","createTrip","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","localUri","uri","filename","split","pop","match","exec","type","console","log","user","flex","alignItems","justifyContent","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  FormControl,\r\n  Input,\r\n  Center\r\n} from \"native-base\";\r\nimport tripStore from \"../../store/tripStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport authStore from \"../../store/authStore\";\r\n\r\nimport { Image, Text, TouchableOpacity } from \"react-native\";\r\nimport  { useState, useEffect } from 'react';\r\nimport { View, Platform } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nconst AddButton = () => {\r\n    // const _pickImage = async () => {\r\n    //     try {\r\n    //         let result = await ImagePicker.launchImageLibraryAsync({\r\n    //             mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n    //             allowsEditing: true,\r\n    //             aspect: [4, 3],\r\n    \r\n    //             quality: 1,\r\n    //         });\r\n    \r\n    //         if (!result.cancelled) {\r\n    //             const localUri = result.uri;\r\n    //             const filename = localUri.split(\"/\").pop();\r\n    //             const match = /.(\\w+)$/.exec(filename);\r\n    //             const image = {\r\n    //                 uri: localUri,\r\n    //                 name: filename,\r\n    //                 type: match ? image/${match[1]} : image,\r\n    //             };\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     }\r\n    // };\r\n  \r\n  \r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n  const [trip, setTrip] = useState({\r\n    name: \"\",\r\n    title: \"\",\r\n    subtitle: \"\",\r\n    description: \"\",\r\n    image: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  const handleClose = () => setShowModal(false);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    tripStore.createTrip(trip);\r\n    handleClose();\r\n  };\r\n\r\n  //   const openImagePickerAsync = async () => {\r\n  //     let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n  //     if (permissionResult.granted === false) {\r\n  //       alert(\"Permission to access camera roll is required!\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     let pickerResult = await ImagePicker.launchImageLibraryAsync();\r\n  //     console.log(pickerResult);\r\n  //   }\r\n  \r\n  const [image, setImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const { status } =\r\n          await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n        try {\r\n            let result = await ImagePicker.launchImageLibraryAsync({\r\n                mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n                allowsEditing: true,\r\n                aspect: [4, 3],\r\n    \r\n                quality: 1,\r\n            });\r\n    \r\n            if (!result.cancelled) {\r\n                const localUri = result.uri;\r\n                const filename = localUri.split(\"/\").pop();\r\n                const match = /.(\\w+)$/.exec(filename);\r\n                const image = {\r\n                    uri: localUri,\r\n                    name: filename,\r\n                    type: `match ? image/${match[1]} : image`,\r\n                };\r\n                setTrip({ ...trip, image: image });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n};\r\n\r\n\r\n  return (\r\n    <View>\r\n    <Center flex={1} px=\"3\">\r\n      {authStore.user !== null ? (\r\n        <>\r\n          <Button onPress={() => setShowModal(true)} backgroundColor=\"#0000ff\">\r\n            +\r\n          </Button>\r\n\r\n          <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\r\n            <Modal.Content maxWidth=\"400px\">\r\n              <Modal.CloseButton />\r\n              <Modal.Header>Add A Trip</Modal.Header>\r\n              <Modal.Body>\r\n                <FormControl>\r\n                  <FormControl.Label>Which City?</FormControl.Label>\r\n                  <Input onChangeText={(name) => setTrip({ ...trip, name })} />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <FormControl.Label>Title</FormControl.Label>\r\n                  <Input\r\n                    onChangeText={(title) => setTrip({ ...trip, title })}\r\n                  />\r\n                </FormControl>\r\n                <FormControl mt=\"3\">\r\n                  <FormControl.Label>Subtitle</FormControl.Label>\r\n                  <Input\r\n                    name=\"subtite\"\r\n                    onChangeText={(subtitle) => setTrip({ ...trip, subtitle })}\r\n                  />\r\n                </FormControl>\r\n                <FormControl mt=\"3\">\r\n                  <FormControl mt=\"3\">\r\n                    <FormControl.Label>Description</FormControl.Label>\r\n                    <Input\r\n                      name=\"description\"\r\n                      onChangeText={(description) =>\r\n                        setTrip({ ...trip, description })\r\n                      }\r\n                    />\r\n                    <FormControl.HelperText>\r\n                      250 character limit.\r\n                    </FormControl.HelperText>\r\n                  </FormControl>\r\n\r\n                <FormControl>\r\n                  <FormControl.Label>How long was your trip?</FormControl.Label>\r\n                  <Input onChangeText={(date) => setTrip({ ...trip, date })} />\r\n                  <FormControl.HelperText>\r\n                    Please use this format: YYYY-MM-DD.\r\n                  </FormControl.HelperText>\r\n                </FormControl>\r\n\r\n\r\n                <FormControl.Label mt=\"3\">Photo</FormControl.Label>\r\n\r\n                {/* <Input  */}\r\n                {/* // name=\"image\"\r\n                  // type=\"file\"\r\n                  > */}\r\n                <View\r\n                  style={{\r\n                    flex: 1,\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  <Button\r\n                    title=\"Pick an image from camera roll\"\r\n                    onPress={pickImage}\r\n                  />\r\n                  {image && (\r\n                    <Image\r\n                      source={{ uri: image }}\r\n                      style={{ width: 200, height: 200 }}\r\n                    />\r\n                  )}\r\n                </View>\r\n\r\n                {/* <TouchableOpacity onPress={openImagePickerAsync} >\r\n                    <Text >Pick a photo</Text>\r\n                  </TouchableOpacity> */}\r\n                {/* </Input> */}\r\n                {/* // name=\"image\"\r\n\r\n                  // type=\"file\"\r\n                  // // onChange={handleImage}\r\n                  // onChangeText={(image) => setTrip({ ...trip, image })}\r\n                /> */}\r\n                </FormControl>\r\n\r\n              </Modal.Body>\r\n\r\n              <Modal.Footer>\r\n                <Button.Group space={2}>\r\n                  <Button\r\n                    // variant=\"ghost\"\r\n                    onPress={() => {\r\n                      setShowModal(false);\r\n                    }}\r\n                    backgroundColor=\"#0000ff\"\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button onPress={handleSubmit} backgroundColor=\"#0000ff\">\r\n                    Save\r\n                  </Button>\r\n                </Button.Group>\r\n              </Modal.Footer>\r\n            </Modal.Content>\r\n          </Modal>\r\n        </>\r\n      ) : (\r\n        <Button  >\r\n          +\r\n        </Button>\r\n        // onPress={TripCreateAlert}\r\n      )}\r\n    </Center>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default observer(AddButton);"]},"metadata":{},"sourceType":"module"}